package main

import (
	"context"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/chtozamm/javacode-wallet/internal/database"
	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/joho/godotenv"
)

type application struct {
	db      *pgxpool.Pool
	queries *database.Queries
	auth    struct {
		username string
		password string
	}
}

func main() {
	// Load environment variables
	log.Println("Setting up environment variables...")
	err := godotenv.Load()
	if err != nil {
		log.Fatalf("Failed to load environment variables: %v", err)
	}

	dbURL := os.Getenv("DB_URL")
	if dbURL == "" {
		log.Fatal("Missing DB_URL environment variable")
	}

	port := os.Getenv("PORT")
	if port == "" {
		log.Fatal("Missing PORT environment variable")
	}

	// Create database connection pool
	log.Println("Creating database connection pool...")
	dbPool, err := pgxpool.New(context.Background(), dbURL)
	if err != nil {
		log.Fatalf("Unable to create connection pool: %v", err)
	}
	defer dbPool.Close()

	// Check the database connection
	log.Println("Trying to reach the database...")
	ctx, cancel := context.WithTimeout(context.Background(), time.Second*5)
	defer cancel()
	err = dbPool.Ping(ctx)
	if err != nil {
		log.Fatalf("Unable to reach the database: %v", err)
	}

	// Wrap the DB connection in queries generated by sqlc
	dbQueries := database.New(dbPool)

	// Application configuration
	app := &application{
		db:      dbPool,
		queries: dbQueries,
	}

	// Load authentication credentials from environment variables
	app.auth.username = os.Getenv("AUTH_USERNAME")
	if app.auth.username == "" {
		log.Println("WARNING: Missing AUTH_USERNAME environment variable. Endpoints that require authentication will be inaccessible.")
	}

	app.auth.password = os.Getenv("AUTH_PASSWORD")
	if app.auth.password == "" {
		log.Println("WARNING: Missing AUTH_PASSWORD environment variable. Endpoints that require authentication will be inaccessible.")
	}

	// Set up the router
	mux := http.NewServeMux()
	mux.HandleFunc("GET /api/v1/wallets/{wallet_id}", app.handleGetBalance)
	mux.HandleFunc("GET /api/v1/wallets", app.basicAuthMiddleware(app.handleGetWallets))
	mux.HandleFunc("POST /api/v1/wallets", app.handleCreateWallet)
	mux.HandleFunc("POST /api/v1/wallets/{wallet_id}", app.handleOperation)
	mux.HandleFunc("DELETE /api/v1/wallets/{wallet_id}", app.handleDeleteWallet)
	mux.HandleFunc("GET /api/v1/healthz", app.handleHealthCheck)

	// Set up and start the server
	srv := &http.Server{
		Addr:              ":" + port,
		Handler:           mux,
		ReadTimeout:       5 * time.Second,
		WriteTimeout:      10 * time.Second,
		IdleTimeout:       30 * time.Second,
		ReadHeaderTimeout: 2 * time.Second,
	}

	log.Printf("Server is listening on port :%s\n", port)

	// Start the server in a goroutine
	go func() {
		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatal(err)
		}
	}()

	// Graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, os.Interrupt, syscall.SIGTERM)
	<-quit

	log.Println("Shutting down the server...")
	if err := srv.Shutdown(context.Background()); err != nil {
		log.Fatalf("Server forced to shut down: %v", err)
	}
	log.Println("Server has been successfully shut down.")
}
